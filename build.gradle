plugins {
    id 'org.springframework.boot' version '2.6.12' 
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171" 
}

group = 'ch.uzh.ifi.hase'
version = '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

dependencies {
    // MapStruct Dependencies
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    // Spring Boot Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database Drivers
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql' 

    // Security and Validation Dependencies (from local)
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.springframework.security:spring-security-crypto:5.6.0'
    implementation 'org.hibernate.validator:hibernate-validator:6.2.4.Final'

    // JavaMail API for Email Service
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'jakarta.activation:jakarta.activation-api:2.0.1' 

    // Testing Dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2' 
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
        html.required.set(true)
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1

    reports {
        junitXml.required.set(true)
        junitXml.outputLocation.set(layout.buildDirectory.dir("test-results/test"))
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/tests/test"))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "aimalai_sopra-fs25-group-29-server"
        property "sonar.organization", "aimalai"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "sopra-fs25-group-29-server"
        property "sonar.sources",               "src/main/java"
        property "sonar.tests",                 "src/test/java"
        property "sonar.java.binaries",         "build/classes/java/main"
        //property "sonar.junit.reportPaths",     "${buildDir}/test-results/test"
        property "sonar.junit.reportPaths", "build/test-results/test"
        //property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.sonarqube {
    dependsOn jacocoTestReport
}

defaultTasks 'build'